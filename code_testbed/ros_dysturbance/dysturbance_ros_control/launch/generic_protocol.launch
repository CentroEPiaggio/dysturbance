<launch>
  <arg name="config_pendulum" doc="The configuration parameters of the pendulum for the current experiment."/>
  <arg name="config_platform" doc="The configuration parameters of the platform for the current experiment."/>
  <arg name="config_protocol" doc="The configuration parameters of the protocol for the current experiment."/>
  <arg name="config_subject" doc="The configuration parameters of the subject for the current experiment."/>

  <group ns="dysturbance">
    <!-- pendulum information -->
    <rosparam file="$(eval find('dysturbance_ros_control') + '/config/' + config_pendulum + '.yaml')" command="load"/>

    <!-- platform information -->
    <rosparam file="$(eval find('dysturbance_ros_control') + '/config/' + config_platform + '.yaml')" command="load"/>

    <!-- protocol information -->
    <rosparam file="$(eval find('dysturbance_ros_control') + '/config/' + config_protocol + '.yaml')" command="load"/>

    <!-- subject information -->
    <rosparam file="$(eval find('dysturbance_ros_control') + '/config/' + config_subject + '.yaml')" command="load"/>

    <!-- debug -->
    <param name="debug_acquisition" type="bool" value="false"/>
    <!-- reset pendulum position -->
    <param name="reset_pendulum" type="bool" value="false"/>

    <!-- start the control node to execute the experiment and start the data acquisition -->
    <node name="data_acquisition" pkg="dysturbance_ros_control" type="dysturbance_ros_default"
          respawn="false" output="screen" required="true"/>

    <!-- start the OPC-UA communication node -->
    <node name="opcua_client" pkg="ros_opcua_impl_freeopcua" type="client_node"
          respawn="false" output="screen" required="true"/>
  </group>
</launch>